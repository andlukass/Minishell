OK • Display a prompt when waiting for a new command.
OK • Have a working history.
OK • Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash.
OK • In interactive mode:
	OK ◦ ctrl-C displays a new prompt on a new line.
	OK ◦ ctrl-D exits the shell.
	OK ◦ ctrl-\ does nothing.
OK • Avoid using more than one global variable to indicate a received signal. Consider the implications: this approach ensures that your signal handler will not access your main data structures.
OK • Not interpret unclosed quotes or special characters which are not required by the subject such as \ (backslash) or ; (semicolon).
OK • Your shell must implement the following builtins:
	OK ◦ echo with option -n
	OK ◦ exit with no options
	OK ◦ pwd with no options
	OK ◦ env with no options or arguments
	OK ◦ export with no options
	OK ◦ unset with no options
	OK ◦ cd with only a relative or absolute path
OK • Implement pipes (| character). The output of each command in the pipeline is
connected to the input of the next command via a pipe.
• Implement redirections:
	OK ◦ > should redirect output to a FILE.
	OK ◦ >> should redirect output to a FILE in append mode.
	◦ < should redirect input.
	◦ << should be given a delimiter, then read the input until a line containing the delimiter is seen. However, it doesn’t have to update the history!


• Search and launch the right executable (based on the PATH variable or using a relative or an absolute path).
• Handle '' (single quote) which should prevent the shell from interpreting the meta-characters in the quoted sequence.
• Handle "" (double quote) which should prevent the shell from interpreting the meta-characters in the quoted sequence except for $ (dollar sign).
• Handle environment variables ($ followed by a sequence of characters) which
should expand to their values.
• Handle $? which should expand to the exit status of the most recently executed
foreground pipeline.

functions utils to make:
strcmp
strncmp
strdup